//package com.ctgu.test;
//
//import com.ctgu.list.SingleCicleList;
//
///**
// * 约瑟夫环问题：<br>
// * 约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知n个人（以编号1，2，3...n分别表示）围坐在一张圆桌周围。<br>
// * 从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；<br>
// * 依此规律重复下去，直到圆桌周围的人全部出列。通常解决这类问题时我们把编号从0~n-1，<br>
// * 最后结果+1即为原问题的解。 <br>
// * 约瑟夫环运作如下：<br>
// * 1、一群人围在一起坐成环状（如：N）<br>
// * 2、从某个编号开始报数（如：K）<br>
// * 3、数到某个数（如：M）的时候，此人出列，下一个人重新报数<br>
// * 4、一直循环，直到所有人出列 ，约瑟夫环结束<br>
// * 解法一(My Solution)： 思想：建立一个有N个元素的循环链表，然后从链表头开始遍历并记数，如果计数i==m(i初始为1)踢出元素， 继续循环，当当前元素与下一元素相同时退出循环。 解法二(From Net)：
// * 思想：归纳为数学性问题。无论是用链表实现还是用数组实现都有一个共同点：要模拟整个游戏过程，不仅程序写起来比较烦，而且时间复杂度高达O(nm)，当n，m非常大(例如上百万，上千万)的时候，几乎是没有办法在短时间内出结果的。我们注意到原问题仅仅是要求出最后的胜利者的序号，而不是要读者模拟整个过程。因此如果要追求效率，就要打破常规，实施一点数学策略。
// * 为了讨论方便，先把问题稍微改变一下，并不影响原意： 问题描述：n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人继续从0开始报数。求胜利者的编号。 我们知道第一个人(编号一定是m%n-1)
// * 出列之后，剩下的n-1个人组成了一个新的约瑟夫环（以编号为k=m%n的人开始）: k k+1 k+2 ... n-2, n-1, 0, 1, 2, ... k-2并且从k开始报0。 现在我们把他们的编号做一下转换： k --> 0
// * k+1 --> 1 k+2 --> 2 ... ... k-2 --> n-2 k-1 --> n-1
// * 变换后就完完全全成为了(n-1)个人报数的子问题，假如我们知道这个子问题的解：例如x是最终的胜利者，那么根据上面这个表把这个x变回去不刚好就是n个人情况的解吗？！！变回去的公式很简单，相信大家都可以推出来：x'=(x+k)%n
// * 如何知道(n-1)个人报数的问题的解？对，只要知道(n-2)个人的解就行了。(n-2)个人的解呢？当然是先求(n-3)的情况 ---- 这显然就是一个倒推问题！好了，思路出来了，下面写递推公式：
// * 令f[i]表示i个人玩游戏报m退出最后胜利者的编号，最后的结果自然是f[n] 递推公式 f[1]=0; f[i]=(f[i-1]+m)%i; (i>1)
// * 有了这个公式，我们要做的就是从1-n顺序算出f[i]的数值，最后结果是f[n]。因为实际生活中编号总是从1开始，我们输出f[n]+1 由于是逐级递推，不需要保存每个f[i]，程序也是异常简单：
// * 
// * @author lh2
// */
//public class JosephRing
//{
//
//	/**
//	 * https://blog.csdn.net/u011638883/article/details/11783793
//	 * 
//	 * @param n
//	 *            一共n个人
//	 * @param k
//	 *            从k开始计数
//	 * @param m
//	 *            数到m的人出列
//	 */
//	public static void joseph(int n, int k, int m)
//	{
//		// 初始化一个单循环链表
//		SingleCicleList list = new SingleCicleList();
//
//		// 向链表中新增n个数据
//		for (int i = 0; i < n; i++)
//		{
//			list.add(i);
//		}
//		
//		while(list.length()>0)
//		{
////			list.deleteNodeAfterN(n,m);
//		}
//
//	}
//
//	// http://www.cnblogs.com/EricYang/archive/2009/09/04/1560478.html
//	public static void main(String[] args)
//	{
//		joseph(9, 1, 5);
//
//	}
//
//}
